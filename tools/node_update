#!/bin/bash
set -e

function usage() {
    echo 1>&2 "Usage: $0 [-g GET_BUILDS_PATH ] [-n IMAGE_NAME ]"
    echo 1>&2 "  default GET_BUILDS_PATH='./get_builds'"
    echo 1>&2 "  default IMAGE_NAME='lsstsqre/jld-lab'"
    exit 2
}

cwd=$(pwd)
OPTIND=1
GET_BUILDS="${cwd}/get_builds"
IMAGE_NAME="lsstsqre/jld-lab"
while getopts ':hg:n:' opt; do
    case $opt in
        h)
            usage
            ;;
        g)
            GET_BUILDS=${OPTARG}
            ;;
        n)
            IMAGE_NAME=${OPTARG}
            ;;
        \?)
            usage
            ;;
    esac
done
shift $((OPTIND - 1))   
# Make temporary directory
#  second alternative is for OS X
td=$(mktemp -d 2>/dev/null || mktemp -d -t 'node_update_temp')
cd ${td}
# Extract current image names
c=$(${GET_BUILDS} | grep ^LAB_CONTAINER_NAMES | cut -d "'" -f 2 |\
           tr ',' ' ')
d=$(docker images | grep ^${IMAGE_NAME} | awk '{print $1 ":" $2}')
# Get current images, stash list for comparison
for want in ${c}; do
    echo "=== Pull image ${want} ==="
    docker pull ${want}
    echo ${want} >> b
done
for have in ${d} ; do
    echo ${have} >> a
done
sort a > a.s
sort b > b.s
# Determine images to purge
purgelist=$(comm -2 -3 a.s b.s | sort | uniq)
# Remove older images
if [ -n "${purgelist}" ]; then
    echo "=== Remove image[s] ${purgelist} ==="
    docker rmi ${purgelist}
fi
cd ${pwd}
rm -rf ${td}
